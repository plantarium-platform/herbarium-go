name: Build, Test, and Check Coverage

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Go environment
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'  # Adjust Go version as needed

      # Step 3: Install dependencies
      - name: Install dependencies
        run: go mod tidy

      # Step 4: Build the application
      - name: Build the application
        run: go build -v ./...

      # Step 5: Run tests and generate coverage report
      - name: Run tests with coverage
        run: go test ./... -coverprofile=coverage.out

      # Step 6: Extract and check coverage
      - name: Check coverage
        run: |
          REQUIRED_COVERAGE=65
          
          # Filter out lines related to test_util.go
          grep -v "test_util.go" coverage.out > filtered_coverage.out
          
          # Recalculate coverage excluding test_util.go
          COVERAGE=$(go tool cover -func=filtered_coverage.out | awk '/total:/ {print $3}' | sed 's/%//')
          
          echo "Coverage (excluding test_util.go) is $COVERAGE%"
          
          if (( $(echo "$COVERAGE < $REQUIRED_COVERAGE" | bc) )); then
            echo "Coverage $COVERAGE% is less than required $REQUIRED_COVERAGE%."
            exit 1
          fi

      # Step 7: Upload test results and coverage report
      - name: Upload Go test results
        uses: actions/upload-artifact@v4
        with:
          name: Go-test-results
          path: coverage.out
